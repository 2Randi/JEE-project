package fr.umontpellier.jeeS.Controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import fr.umontpellier.jeeS.model.Batiment;
import fr.umontpellier.jeeS.model.Composante;
import fr.umontpellier.jeeS.service.BatimentService;
import fr.umontpellier.jeeS.service.ComposanteService;
import org.springframework.transaction.annotation.Transactional;


import org.springframework.ui.Model;

@Controller
public class ExploiteController {

	@Autowired
    private BatimentService batimentService;

    @Autowired
    private ComposanteService composanteService;

    
    //Pour gerer bat-comp
    
    /***	association	***/
    //formulaire
    @GetMapping("/associer")
    @PreAuthorize("hasAnyAuthority('ADMINISTRATEUR', 'GESTIONNAIRE')")
    public String showAssociationForm(@RequestParam(value="codeB",required = false) String codeB,
            						@RequestParam(value="acronyme",required = false) String acronyme,
            						Model model) {
        model.addAttribute("codeB", codeB);
        model.addAttribute("acronyme", acronyme);
        List<Composante> composanteList = composanteService.getAllComposante(); 
        model.addAttribute("composanteList", composanteList);
        List<Batiment> batimentList = batimentService.getAllBatiments(); 
        model.addAttribute("batimentList", batimentList);
      
        return "associer";
    }

    
    @PostMapping("/associer")
    @PreAuthorize("hasAnyAuthority('ADMINISTRATEUR', 'GESTIONNAIRE')")
    public String associateBatimentToComposante(@RequestParam("codeB") String codeB,
									            @RequestParam("acronyme") String acronyme,
									            Model model) {
    	
   
    	List<Batiment> batimentList = batimentService.findByCodeB(codeB);
        if (!batimentList.isEmpty()) {
            Batiment batiment = batimentList.get(0);
      
        List<Composante> composanteList = composanteService.findByAcronyme(acronyme);
        if (!composanteList.isEmpty()) {
        	Composante composante = composanteList.get(0);
       

        if (batiment != null && composante != null) {
            batiment.addComposante(composante);
            batimentService.saveBatiment(batiment);
        }
        }
        }
        return "redirect:/";
    }

    //Afficher
    @GetMapping("/showAssociation")
    @PreAuthorize("hasAnyAuthority('ADMINISTRATEUR', 'GESTIONNAIRE')")
    public String showAllAssociations(Model model) {
        List<Batiment> batimentList = batimentService.getAllBatiments();
        batimentList = batimentList.stream()
                .filter(batiment -> batiment.getComposantes() != null && !batiment.getComposantes().isEmpty())
                .collect(Collectors.toList());

        model.addAttribute("batimentList", batimentList);
        return "associer";
    }
    
    /***	dissociation bat-comp	***/
    //form
    @GetMapping("/dissocier")
    @PreAuthorize("hasAnyAuthority('ADMINISTRATEUR', 'GESTIONNAIRE')")
    public String showDissociationForm(Model model) {
        List<Batiment> batimentList = batimentService.getAllBatiments();
        
        batimentList = batimentList.stream()
            .filter(batiment -> batiment.getComposantes() != null && !batiment.getComposantes().isEmpty())
            .collect(Collectors.toList());

        model.addAttribute("batimentList", batimentList);
        return "dissocier"; 
    }
    
    @Transactional
    @PostMapping("/dissocier")
    @PreAuthorize("hasAnyAuthority('ADMINISTRATEUR', 'GESTIONNAIRE')")
    public String dissocierComposantes(@RequestParam List<String> codeBList, @RequestParam List<String> composanteToRemove) {
        // Pour chaque codeB dans la liste codeBList
        for (String codeB : codeBList) {
            // Récupérer le Batiment associé à ce codeB
            List<Batiment> batimentList = batimentService.findByCodeB(codeB);
            
            if (!batimentList.isEmpty()) {
                Batiment batiment = batimentList.get(0); 

                composanteToRemove.forEach(acronyme -> {
                    
                    List<Composante> composanteList = composanteService.findByAcronyme(acronyme);
                    if (!composanteList.isEmpty()) {
                        Composante composante = composanteList.get(0); 

                        // Supprimer la relation many-to-many entre le bâtiment et la composante
                        batiment.removeComposante(composante);  
                        batimentService.saveBatiment(batiment);  
                    }
                });
            }
        }
        return "redirect:/";
    }

}
